generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Permission {
  VIEW
  WRITE
}

model PendingGuest {
  id         String     @id @default(uuid())
  roomId     String
  room       Room       @relation(fields: [roomId], references: [id])
  name       String
  email      String?
  approved   Boolean    @default(false)
  permission Permission @default(VIEW)
  createdAt  DateTime   @default(now())
}

model Room {
  id        String         @id
  slug      String
  createdAt DateTime       @default(now())
  adminId   String
  admin     User           @relation(fields: [adminId], references: [id], name: "RoomAdmin")
  chats     Chat[]
  pending   PendingGuest[]

  RoomUser RoomUser[]
}

model RoomUser {
  id         String     @id @default(uuid())
  roomId     String
  userId     String
  permission Permission @default(VIEW)
  room       Room       @relation(fields: [roomId], references: [id])
  user       User       @relation(fields: [userId], references: [id])

  @@unique([roomId, userId])
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String?
  name          String
  image         String?
  emailVerified DateTime? @map("email_verified")
  accounts      Account[]
  sessions      Session[]
  chats         Chat[]
  adminOf       Room[]    @relation("RoomAdmin")

  RoomUser RoomUser[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Chat {
  id      String @id
  roomId  String
  message String
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  room    Room   @relation(fields: [roomId], references: [id])
}
